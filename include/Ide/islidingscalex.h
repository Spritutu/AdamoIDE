#if !defined(AFX_ISLIDINGSCALEX_H__634ABBCB_D340_407D_9366_041C9CCFAA4B__INCLUDED_)
#define AFX_ISLIDINGSCALEX_H__634ABBCB_D340_407D_9366_041C9CCFAA4B__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class COleFont;

/////////////////////////////////////////////////////////////////////////////
// CiSlidingScaleX wrapper class

class CiSlidingScaleX : public CWnd
{
protected:
	DECLARE_DYNCREATE(CiSlidingScaleX)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xe29c6b91, 0x3542, 0x4f37, { 0x82, 0xce, 0x2b, 0xfb, 0x7b, 0x89, 0x33, 0xd3 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	double GetScaleSpan();
	void SetScaleSpan(double newValue);
	unsigned long GetScaleBackGroundColor();
	void SetScaleBackGroundColor(unsigned long newValue);
	long GetScaleAlignStyle();
	void SetScaleAlignStyle(long nNewValue);
	long GetTickMajorCount();
	void SetTickMajorCount(long nNewValue);
	long GetTickMajorWidth();
	void SetTickMajorWidth(long nNewValue);
	long GetTickMajorLength();
	void SetTickMajorLength(long nNewValue);
	unsigned long GetTickMajorColor();
	void SetTickMajorColor(unsigned long newValue);
	COleFont GetTickMajorLabelFont();
	void SetTickMajorLabelFont(LPDISPATCH newValue);
	long GetTickMajorLabelPrecision();
	void SetTickMajorLabelPrecision(long nNewValue);
	double GetTickMajorLabelMargin();
	void SetTickMajorLabelMargin(double newValue);
	long GetTickMidWidth();
	void SetTickMidWidth(long nNewValue);
	long GetTickMidLength();
	void SetTickMidLength(long nNewValue);
	unsigned long GetTickMidColor();
	void SetTickMidColor(unsigned long newValue);
	COleFont GetTickMidLabelFont();
	void SetTickMidLabelFont(LPDISPATCH newValue);
	long GetTickMidLabelPrecision();
	void SetTickMidLabelPrecision(long nNewValue);
	double GetTickMidLabelMargin();
	void SetTickMidLabelMargin(double newValue);
	long GetTickMinorCount();
	void SetTickMinorCount(long nNewValue);
	long GetTickMinorWidth();
	void SetTickMinorWidth(long nNewValue);
	long GetTickMinorLength();
	void SetTickMinorLength(long nNewValue);
	unsigned long GetTickMinorColor();
	void SetTickMinorColor(unsigned long newValue);
	long GetPointerStyle();
	void SetPointerStyle(long nNewValue);
	unsigned long GetPointerColor();
	void SetPointerColor(unsigned long newValue);
	long GetPointerSize();
	void SetPointerSize(long nNewValue);
	long GetPointerOrientation();
	void SetPointerOrientation(long nNewValue);
	unsigned long GetPointerLineColor();
	void SetPointerLineColor(unsigned long newValue);
	long GetPointerLineWidth();
	void SetPointerLineWidth(long nNewValue);
	double GetPosition();
	void SetPosition(double newValue);
	BOOL GetShowMidTicks();
	void SetShowMidTicks(BOOL bNewValue);
	BOOL GetShowMidTickLabels();
	void SetShowMidTickLabels(BOOL bNewValue);
	BOOL GetReverseScale();
	void SetReverseScale(BOOL bNewValue);
	long GetOrientation();
	void SetOrientation(long nNewValue);
	long GetScaleOrientation();
	void SetScaleOrientation(long nNewValue);
	BOOL GetScaleAntiAliasEnabled();
	void SetScaleAntiAliasEnabled(BOOL bNewValue);
	BOOL GetScaleShadowEnabled();
	void SetScaleShadowEnabled(BOOL bNewValue);
	unsigned long GetScaleShadowColor();
	void SetScaleShadowColor(unsigned long newValue);
	CString GetTitleText();
	void SetTitleText(LPCTSTR lpszNewValue);
	double GetTitleMargin();
	void SetTitleMargin(double newValue);
	COleFont GetTitleFont();
	void SetTitleFont(LPDISPATCH newValue);
	long GetTitleAlignment();
	void SetTitleAlignment(long nNewValue);
	long GetOuterMarginLeft();
	void SetOuterMarginLeft(long nNewValue);
	long GetOuterMarginTop();
	void SetOuterMarginTop(long nNewValue);
	long GetOuterMarginRight();
	void SetOuterMarginRight(long nNewValue);
	long GetOuterMarginBottom();
	void SetOuterMarginBottom(long nNewValue);
	unsigned long GetBackGroundColor();
	void SetBackGroundColor(unsigned long newValue);
	long GetBorderStyle();
	void SetBorderStyle(long nNewValue);
	BOOL GetTransparent();
	void SetTransparent(BOOL bNewValue);
	long GetUpdateFrameRate();
	void SetUpdateFrameRate(long nNewValue);
	BOOL GetVisible();
	void SetVisible(BOOL bNewValue);
	BOOL GetEnabled();
	void SetEnabled(BOOL bNewValue);
	void AboutBox();
	unsigned long GetTickMajorLabelFontColor();
	void SetTickMajorLabelFontColor(unsigned long newValue);
	unsigned long GetTickMidLabelFontColor();
	void SetTickMidLabelFontColor(unsigned long newValue);
	unsigned long GetTitleFontColor();
	void SetTitleFontColor(unsigned long newValue);
	void RepaintAll();
	void BeginUpdate();
	void EndUpdate();
	void Lock();
	void Unlock();
	void ShowPropertyEditor();
	long GetComponentHandle();
	void SaveImageToBitmap(LPCTSTR FileName);
	void SaveImageToMetaFile(LPCTSTR FileName);
	void SaveImageToJPEG(LPCTSTR FileName, long Compression, BOOL Progressive);
	long OPCAddItem();
	long OPCItemCount();
	void OPCRemoveAllItems();
	void OPCItemActivate(long Index);
	void OPCItemDeactivate(long Index);
	CString GetOPCItemComputerName(long Index);
	CString GetOPCItemServerName(long Index);
	CString GetOPCItemItemName(long Index);
	CString GetOPCItemPropertyName(long Index);
	BOOL GetOPCItemAutoConnect(long Index);
	long GetOPCItemUpdateRate(long Index);
	void SetOPCItemComputerName(long Index, LPCTSTR Value);
	void SetOPCItemServerName(long Index, LPCTSTR Value);
	void SetOPCItemItemName(long Index, LPCTSTR Value);
	void SetOPCItemPropertyName(long Index, LPCTSTR Value);
	void SetOPCItemAutoConnect(long Index, BOOL Value);
	void SetOPCItemUpdateRate(long Index, long Value);
	void OPCItemLoaded(long Index);
	BOOL GetCachedDrawing();
	void SetCachedDrawing(BOOL bNewValue);
	long GetObjectPointer();
	VARIANT GetBytesJPEG(long Compression, BOOL Progressive);
	void SavePropertiesToFile(LPCTSTR FileName);
	void LoadPropertiesFromFile(LPCTSTR FileName);
	BOOL GetOptionSaveAllProperties();
	void SetOptionSaveAllProperties(BOOL bNewValue);
	BOOL GetAutoFrameRate();
	void SetAutoFrameRate(BOOL bNewValue);
	void iPaintToDC(long X, long Y, BOOL Transparent, long DC);
	long GetWidth();
	void SetWidth(long nNewValue);
	long GetHeight();
	void SetHeight(long nNewValue);
	void OPCItemUpdateResume(long Index);
	void OPCItemUpdateSuspend(long Index);
	VARIANT GetOPCItemData(long Index);
	short GetOPCItemQuality(long Index);
	double GetOPCItemTimeStamp(long Index);
	void SetOPCItemData(long Index, const VARIANT& Value);
	BOOL GetOPCItemActive(long Index);
	CString GetOPCItemGroupName(long Index);
	void SetOPCItemGroupName(long Index, LPCTSTR Value);
	void OPCDeleteItem(long Index);
	void OPCItemActivateSuspend(long Index);
	VARIANT GetBytesPNG(long Compression);
	void SaveImageToPNG(LPCTSTR FileName, long Compression);
	VARIANT GetOPCItemDataNow(long Index, short* Quality);
	BOOL GetOPCItemUpdateSuspended(long Index);
	double GetOPCItemScalar(long Index);
	double GetOPCItemOffset(long Index);
	void SetOPCItemScalar(long Index, double Value);
	void SetOPCItemOffset(long Index, double Value);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_ISLIDINGSCALEX_H__634ABBCB_D340_407D_9366_041C9CCFAA4B__INCLUDED_)
